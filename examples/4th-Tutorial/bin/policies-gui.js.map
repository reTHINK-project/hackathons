{"version":3,"sources":["node_modules/browser-pack/_prelude.js","policies-gui.js","src/admin/PoliciesGUI.js","src/admin/PoliciesManager.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","policiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_PoliciesManager","_PoliciesManager2","PoliciesGUI","pepGuiURL","pepURL","messageBus","_this","policiesManager","Promise","resolve","reject","prepareAttributes","then","elements","_setElements","_setListeners","group","event","id","$","html","openModal","off","on","member","val","addToGroup","closeModal","_manageGroups","groupName","createGroup","algorithms","append","_getOptions","policyTitle","combiningAlgorithm","addPolicy","addClass","_goHome","Materialize","toast","removeClass","closest","splitId","split","thisPriority","parseInt","pop","join","getPolicy","policy","lastPriority","getLastPriority","newPriority","decreaseRulePriority","removeFromGroup","children","deleteGroup","deletePolicy","priority","rule","getRuleOfPolicy","deleteRule","getActivePolicy","activeUserPolicy","getPoliciesTitles","policies","push","find","textContent","undefined","updateActivePolicy","title","keys","scopes","lists","list","j","variable","info","indexOf","splitInfo","substring","months","_splitInfo","text","items","numItems","selected","options","getFormattedPolicies","policiesTitles","rulesTitles","ids","table","isEmpty","_i","_showVariablesTypes","_deleteRule","_showRule","_increaseRulePriority","_decreaseRulePriority","_addPolicy","_deletePolicy","_getActivePolicy","_getPoliciesTable","increaseRulePriority","getGroups","groupsPE","groups","groupsNames","members","_addMember","_deleteMember","_createGroup","_deleteGroup","content","parsedContent","JSON","parse","_this2","date","params","select","form","_this3","_getNewConfiguration","empty","getMyEmails","emails","getMyHyperties","hyperties","_getGroupOptions","_this4","variables","getVariables","_getList","_showNewConfigurationPanel","getVariableInfo","description","tags","input","_loop","getGroupsNames","pickadate","selectMonths","selectYears","document","getElementById","checked","_info","_getInfo","decision","scope","setInfo","resourceType","shift","condition","deleteInfo","_this5","parent","postMessage","body","method","to","getElementsByTagName","style","file","files","reader","FileReader","readAsText","onload","_parseFileContent","result","onerror","_this6","ruleTitle","attribute","element","_updateRule","type","splitTitle","index","newDecision","updatePolicy","newSubscriptionType","labels","./PoliciesManager","2","PoliciesManager","_guiURL","_pepURL","_messageBus","methodName","parameters","message","from","resource","res","callPolicyEngineFunc","userPolicies","setVariables","addition","setAdditionMethods","validation","setValidationMethods","user","userEmail","source","titles","targets","Date","Domain","Group of users","Subscription preferences","Time of the day","Weekday","createRule","operator","start","end","weekdays","isValidDate","isValidScope","isValidString","isValidDomain","isValidSubscriptionType","isValidTimeslot","userPolicy","pattern","test","infoSplit","day","month","year","isValidFormat","getFullYear","getMonth","getDate","now","isFuture","twoTimes","splitStart","splitEnd","okSize","areIntegers","policiesPE","policiesGUI","rules","sortRules","_getTitle","getRuleByPriority","authorise","weekdayID","variablesTitles","conditionSplit","deletion","groupsGUI","opeator"],"mappings":"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","file":"policies-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.policiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PoliciesManager = require('./PoliciesManager');\n\nvar _PoliciesManager2 = _interopRequireDefault(_PoliciesManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesGUI = function () {\n  function PoliciesGUI(pepGuiURL, pepURL, messageBus) {\n    _classCallCheck(this, PoliciesGUI);\n\n    var _this = this;\n    _this.policiesManager = new _PoliciesManager2.default(pepGuiURL, pepURL, messageBus);\n    // assume prepareAttributes is called after this\n  }\n\n  _createClass(PoliciesGUI, [{\n    key: 'prepareAttributes',\n    value: function prepareAttributes() {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.policiesManager.prepareAttributes().then(function () {\n          _this.elements = _this._setElements();\n          _this._setListeners();\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: '_addMember',\n    value: function _addMember() {\n      var _this = this;\n      var group = event.target.id;\n      $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n      $('.member-new-modal').openModal();\n      $('.member-new-ok').off();\n      $('.member-new-ok').on('click', function (event) {\n        var member = $('#member-new').val();\n        $('#member-new').val('');\n        _this.policiesManager.addToGroup(group, member).then(function () {\n          $('.member-new-modal').closeModal();\n          _this._manageGroups();\n        });\n      });\n    }\n  }, {\n    key: '_createGroup',\n    value: function _createGroup() {\n      var _this = this;\n      $('#group-new-name').val('');\n      $('.group-new-modal').openModal();\n      $('.group-new-ok').on('click', function (event) {\n        var groupName = $('#group-new-name').val();\n        _this.policiesManager.createGroup(groupName).then(function () {\n          _this._manageGroups();\n        });\n      });\n    }\n  }, {\n    key: '_addPolicy',\n    value: function _addPolicy() {\n      var _this = this;\n      $('#policy-new-title').val('');\n      $('.combining').html('');\n      var algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\n      $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\n      $('.policy-new').openModal();\n\n      $('.policy-new-ok').off();\n      $('.policy-new-ok').on('click', function (event) {\n        var policyTitle = $('#policy-new-title').val();\n        if (!policyTitle) {\n          Materialize.toast('Invalid policy title', 4000);\n        } else {\n          var combiningAlgorithm = $('#comb-algorithm').val();\n          _this.policiesManager.addPolicy(policyTitle, combiningAlgorithm).then(function () {\n            $('.help-menu').addClass('hide');\n            $('.policy-new').closeModal();\n            _this._goHome();\n          });\n        }\n      });\n      $('.help-btn').off();\n      $('.help-btn').on('click', function (event) {\n        $('.help-menu').removeClass('hide');\n      });\n    }\n  }, {\n    key: '_decreaseRulePriority',\n    value: function _decreaseRulePriority() {\n      var _this = this;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      _this.policiesManager.getPolicy(policyTitle).then(function (policy) {\n        var lastPriority = policy.getLastPriority();\n        if (lastPriority != thisPriority) {\n          var newPriority = parseInt(thisPriority + 1);\n          _this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority).then(function () {\n            _this._goHome();\n          });\n        }\n      });\n    }\n  }, {\n    key: '_deleteMember',\n    value: function _deleteMember() {\n      var _this = this;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split('::');\n      var member = splitId[splitId.length - 1];\n      splitId.pop();\n      var group = splitId.join('::');\n      _this.policiesManager.removeFromGroup(group, member).then(function () {\n        _this._manageGroups();\n      });\n    }\n  }, {\n    key: '_deleteGroup',\n    value: function _deleteGroup() {\n      var _this = this;\n      var groupName = event.target.closest('tr').children[0].id;\n      _this.policiesManager.deleteGroup(groupName).then(function () {\n        _this._manageGroups();\n      });\n    }\n  }, {\n    key: '_deletePolicy',\n    value: function _deletePolicy() {\n      var _this = this;\n      var policyTitle = event.target.closest('tr').id;\n      _this.policiesManager.deletePolicy(policyTitle).then(function () {\n        _this._goHome();\n      });\n    }\n  }, {\n    key: '_deleteRule',\n    value: function _deleteRule() {\n      var _this = this;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = _this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n      _this.policiesManager.deleteRule(policyTitle, rule).then(function () {\n        _this._goHome();\n      });\n    }\n  }, {\n    key: '_getActivePolicy',\n    value: function _getActivePolicy() {\n      var _this = this;\n      _this.policiesManager.getActivePolicy().then(function (activeUserPolicy) {\n        $('.policy-active').html('');\n        _this.policiesManager.getPoliciesTitles().then(function (policies) {\n          policies.push('Deactivate all policies');\n\n          $('.policy-active').append(_this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\n\n          $('#policies-list').on('click', function (event) {\n            var policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\n            if (policyTitle === 'Deactivate all policies') {\n              policyTitle = undefined;\n            }\n            _this.policiesManager.updateActivePolicy(policyTitle);\n          });\n        });\n      });\n    }\n  }, {\n    key: '_getGroupOptions',\n    value: function _getGroupOptions(title, keys, scopes, lists) {\n      var list = '<option disabled selected>' + title + '</option>';\n\n      for (var i in keys) {\n        list += '<optgroup label=' + keys[i] + '>';\n        for (var j in lists[i]) {\n          list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getInfo',\n    value: function _getInfo(variable) {\n      var info = void 0;\n\n      switch (variable) {\n        case 'Date':\n          info = $('.config').find('input').val();\n          if (info.indexOf(',') !== -1) {\n            //20 July, 2016\n            var splitInfo = info.split(' '); //['20', 'July,',' '2016']\n            splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n            info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n          } else {\n            // 2016-07-20\n            var _splitInfo = info.split('-');\n            info = _splitInfo[2] + '/' + _splitInfo[1] + '/' + _splitInfo[0];\n          }\n          break;\n        case 'Group of users':\n          info = $('#group').find(\":selected\").text();\n          break;\n        case 'Subscription preferences':\n          if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n            info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n          }\n          break;\n        case 'Weekday':\n          info = $('#weekday').find(\":selected\").text();\n          break;\n        default:\n          info = $('.config').find('input').val();\n          break;\n      }\n\n      return info;\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getOptions',\n    value: function _getOptions(id, title, list, selected) {\n      var options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n      for (var i in list) {\n        if (selected !== undefined & selected === list[i]) {\n          options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\n        } else {\n          options += '<option id=\"' + id + '\">' + list[i] + '</option>';\n        }\n      }\n      options += '</select>';\n\n      return options;\n    }\n  }, {\n    key: '_getPoliciesTable',\n    value: function _getPoliciesTable() {\n      var _this = this;\n\n      _this.policiesManager.getFormattedPolicies().then(function (policies) {\n        $('.policies-no').addClass('hide');\n        $('.policies-current').html('');\n\n        var policiesTitles = [];\n        var rulesTitles = [];\n        var ids = [];\n\n        for (var i in policies) {\n          policiesTitles.push(policies[i].title);\n          rulesTitles.push(policies[i].rulesTitles);\n          ids.push(policies[i].ids);\n        }\n\n        var table = '<table>';\n        var isEmpty = policiesTitles.length === 0;\n\n        for (var _i in policiesTitles) {\n          table += '<thead><tr id=\"' + policiesTitles[_i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[_i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n\n          for (var j in rulesTitles[_i]) {\n            table += '<tr id=\"' + ids[_i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[_i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n          }\n          table += '<tr id=\"' + policiesTitles[_i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n        }\n        if (!isEmpty) {\n          table += '</tbody></table>';\n          $('.policies-current').append(table);\n        } else {\n          $('.policies-no').removeClass('hide');\n        }\n        $('.rule-add').on('click', function (event) {\n          _this._showVariablesTypes();\n        });\n        $('.rule-delete').on('click', function (event) {\n          _this._deleteRule();\n        });\n        $('.rule-show').on('click', function (event) {\n          _this._showRule();\n        });\n        $('.rule-priority-increase').on('click', function (event) {\n          _this._increaseRulePriority();\n        });\n        $('.rule-priority-decrease').on('click', function (event) {\n          _this._decreaseRulePriority();\n        });\n        $('.policy-add').off();\n        $('.policy-add').on('click', function (event) {\n          _this._addPolicy();\n        });\n        $('.policy-delete').on('click', function (event) {\n          _this._deletePolicy();\n        });\n      });\n    }\n  }, {\n    key: '_goHome',\n    value: function _goHome() {\n      this._getActivePolicy();\n      this._getPoliciesTable();\n    }\n  }, {\n    key: '_increaseRulePriority',\n    value: function _increaseRulePriority() {\n      var _this = this;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      if (thisPriority !== 0) {\n        splitId.pop();\n        var policyTitle = splitId.join(':');\n        var newPriority = thisPriority - 1;\n\n        _this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority).then(function () {\n          _this._goHome();\n        });\n      }\n    }\n  }, {\n    key: '_manageGroups',\n    value: function _manageGroups() {\n      var _this = this;\n      _this.policiesManager.getGroups().then(function (groupsPE) {\n        $('.groups-current').html('');\n        var groups = groupsPE.groupsNames;\n        var members = groupsPE.members;\n        var ids = groupsPE.ids;\n\n        var table = '<table>';\n        var isEmpty = groups.length === 0;\n\n        for (var i in groups) {\n          table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n          for (var j in members[i]) {\n            table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n          }\n\n          table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n        }\n\n        if (!isEmpty) {\n          table += '</tbody></table>';\n          $('.groups-current').append(table);\n        } else {\n          $('.groups-current').append('<p>There are no groups set.</p>');\n        }\n\n        $('.member-add').off();\n        $('.member-add').on('click', function (event) {\n          _this._addMember();\n        });\n        $('.member-delete').on('click', function (event) {\n          _this._deleteMember();\n        });\n        $('.group-add').off();\n        $('.group-add').on('click', function (event) {\n          _this._createGroup();\n        });\n        $('.group-delete').on('click', function (event) {\n          _this._deleteGroup();\n        });\n      });\n    }\n  }, {\n    key: '_parseFileContent',\n    value: function _parseFileContent(content) {\n      var parsedContent = JSON.parse(content);\n      for (var i in parsedContent) {\n        this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\n      }\n      $('.policy-new').closeModal();\n    }\n  }, {\n    key: '_setElements',\n    value: function _setElements() {\n      var _this2 = this;\n\n      return {\n        date: function date(params) {\n          return '<input type=\"date\" class=\"datepicker\">';\n        },\n        select: function select(params) {\n          return _this2._getOptions(params[0], params[1], params[2]);\n        },\n        form: function form(params) {\n          return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>';\n        }\n      };\n    }\n  }, {\n    key: '_showNewConfigurationPanel',\n    value: function _showNewConfigurationPanel(policyTitle) {\n      var _this3 = this;\n\n      var variable = event.target.text;\n      $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n      $('.scopes').empty().html('');\n\n      var keys = ['Email', 'Hyperty', 'All'];\n      var scopes = ['identity', 'hyperty', 'global'];\n      var lists = [];\n\n      this.policiesManager.getMyEmails().then(function (emails) {\n        lists.push(emails);\n        _this3.policiesManager.getMyHyperties().then(function (hyperties) {\n          lists.push(hyperties);\n          lists.push(['All identities and hyperties']);\n          $('.scopes').append(_this3._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n          $('.variable').removeClass('hide');\n        });\n      });\n    }\n  }, {\n    key: '_showVariablesTypes',\n    value: function _showVariablesTypes() {\n      var _this4 = this;\n\n      var policyTitle = event.target.closest('tr').id;\n\n      $('#variables-types').empty().html('');\n      var variables = this.policiesManager.getVariables();\n      $('#variables-types').append(this._getList(variables));\n      $('.variable').addClass('hide');\n      $('.rule-new').openModal();\n      $('#variables-types').off();\n      $('#variables-types').on('click', function (event) {\n        _this4._showNewConfigurationPanel(policyTitle);\n      });\n    }\n  }, {\n    key: '_getNewConfiguration',\n    value: function _getNewConfiguration(policyTitle, variable) {\n      var _this = this;\n      var info = _this.policiesManager.getVariableInfo(variable);\n      $('.rule-new-title').html(info.title);\n      $('.description').html(info.description);\n      $('.config').html('');\n\n      if (variable === 'Subscription preferences') {\n        $('.subscription-type').removeClass('hide');\n      } else {\n        (function () {\n          $('.subscription-type').addClass('hide');\n          var tags = info.input;\n\n          var _loop = function _loop(i) {\n            _this.policiesManager.getGroupsNames().then(function (groupsNames) {\n              if (variable === 'Group of users') {\n                tags[i][1].push(groupsNames);\n              }\n              $('.config').append(_this.elements[tags[i][0]](tags[i][1]));\n              if (variable === 'Group of users') {\n                tags[i][1].pop();\n              }\n            });\n          };\n\n          for (var i in tags) {\n            _loop(i);\n          }\n          if (variable === 'date') {\n            $('.datepicker').pickadate({\n              selectMonths: true,\n              selectYears: 15\n            });\n          }\n        })();\n      }\n      document.getElementById('allow').checked = false;\n      document.getElementById('block').checked = false;\n      $('.ok-btn').off();\n      $('.ok-btn').on('click', function (event) {\n        if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n          var _info = _this._getInfo(variable);\n          var decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n          decision = decision === 'allow';\n          var scope = $('.scopes').find(\":selected\")[0].id;\n          var target = $('.scopes').find(\":selected\")[0].textContent;\n          target = target === 'All identities and hyperties' ? 'global' : target;\n          _this.policiesManager.setInfo(variable, policyTitle, _info, decision, scope, target).then(function () {\n            $('.rule-new').closeModal();\n            _this._goHome();\n          });\n        } else {\n          throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n        }\n      });\n    }\n  }, {\n    key: '_deleteInfo',\n    value: function _deleteInfo(resourceType) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var scope = splitId[0];\n      splitId.shift();\n      var target = splitId.join('');\n      var condition = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n      this._goHome();\n    }\n  }, {\n    key: '_setListeners',\n    value: function _setListeners() {\n      var _this5 = this;\n\n      $('.settings-btn').on('click', function (event) {\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      });\n\n      $('.policies-page-show').on('click', function (event) {\n        $('.policies-section').removeClass('hide');\n        $('.identities-section').addClass('hide');\n        _this5._goHome();\n        _this5._manageGroups();\n      });\n\n      $('.admin-page-exit').on('click', function (event) {\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n      });\n\n      $('.exit-btn').on('click', function (event) {\n        $('.subscription-type').addClass('hide');\n        $('.help-menu').addClass('hide');\n      });\n\n      $('#policy-file').on('change', function (event) {\n        var file = event.target.files[0];\n        var reader = new FileReader();\n        reader.readAsText(file, \"UTF-8\");\n        reader.onload = function (event) {\n          _this5._parseFileContent(event.target.result);\n          _this5._goHome();\n        };\n        reader.onerror = function (event) {\n          throw Error(\"Error reading the file\");\n        };\n      });\n    }\n  }, {\n    key: '_showRule',\n    value: function _showRule() {\n      var _this6 = this;\n\n      var ruleTitle = event.target.textContent;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      this.policiesManager.getRuleOfPolicy(policyTitle, priority).then(function (rule) {\n        if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n          $('.authorise-btns').addClass('hide');\n        } else {\n          var element = void 0;\n          if (rule.decision) {\n            element = document.getElementById('btn-allow');\n          } else {\n            element = document.getElementById('btn-block');\n          }\n          element.checked = true;\n          $('.authorise-btns').removeClass('hide');\n        }\n        $('.member-add').addClass('hide');\n        $('.member-new-btn').addClass('hide');\n\n        $('.rule-details').openModal();\n        $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n        if (rule.condition.attribute === 'subscription') {\n          $('.subscription-type').removeClass('hide');\n        }\n        $('.subscription-decision').on('click', function (event) {\n          _this6._updateRule('subscription', policyTitle, rule);\n        });\n        $('.decision').off();\n        $('.decision').on('click', function (event) {\n          _this6._updateRule('authorisation', policyTitle, rule);\n        });\n      });\n    }\n  }, {\n    key: '_updateRule',\n    value: function _updateRule(type, policyTitle, rule) {\n      var _this = this;\n      var title = $('.rule-title').text();\n      var splitTitle = title.split(' ');\n      var index = splitTitle.indexOf('is');\n      if (index === -1) {\n        index = splitTitle.indexOf('are');\n      }\n      switch (type) {\n        case 'authorisation':\n          var newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n\n          if (newDecision === 'btn-allow') {\n            splitTitle[index + 1] = 'allowed';\n            newDecision = true;\n          } else {\n            splitTitle[index + 1] = 'blocked';\n            newDecision = false;\n          }\n          title = splitTitle.join(' ');\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          _this.policiesManager.updatePolicy(policyTitle, rule, newDecision).then(function () {\n            _this._goHome();\n          });\n          break;\n        case 'subscription':\n          var newSubscriptionType = event.target.labels[0].textContent;\n\n          var decision = splitTitle[index + 1];\n          splitTitle = title.split('hyperties are');\n          if (newSubscriptionType === 'All subscribers') {\n            $('.authorise-btns').removeClass('hide');\n            newDecision = rule.decision;\n            newSubscriptionType = '*';\n            title = 'Subscriptions from all hyperties are' + splitTitle[1];\n          } else {\n            $('.authorise-btns').addClass('hide');\n            newDecision = true;\n            newSubscriptionType = 'preauthorised';\n            title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n          }\n\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          _this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType).then(function () {\n            _this._goHome();\n          });\n          break;\n      }\n    }\n  }]);\n\n  return PoliciesGUI;\n}();\n\nexports.default = PoliciesGUI;\n\n},{\"./PoliciesManager\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesManager = function () {\n  function PoliciesManager(pepGuiURL, pepURL, messageBus) {\n    _classCallCheck(this, PoliciesManager);\n\n    var _this = this;\n    _this._guiURL = pepGuiURL;\n    _this._pepURL = pepURL;\n    _this._messageBus = messageBus;\n\n    // assume prepare attributes is called after this\n  }\n\n  _createClass(PoliciesManager, [{\n    key: 'callPolicyEngineFunc',\n    value: function callPolicyEngineFunc(methodName, parameters) {\n      var _this = this;\n      var message = void 0;\n\n      return new Promise(function (resolve, reject) {\n        message = { type: 'execute', to: _this._pepURL, from: _this._guiURL,\n          body: { resource: 'policy', method: methodName, params: parameters } };\n        _this._messageBus.postMessage(message, function (res) {\n          var result = res.body.value;\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: 'prepareAttributes',\n    value: function prepareAttributes() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var _this = _this2;\n        _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n          _this.policies = userPolicies;\n          _this.variables = _this.setVariables();\n          _this.addition = _this.setAdditionMethods();\n          _this.validation = _this.setValidationMethods();\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: 'addToGroup',\n    value: function addToGroup(groupName, user) {\n      return this.callPolicyEngineFunc('addToGroup', { groupName: groupName, userEmail: user });\n    }\n  }, {\n    key: 'createGroup',\n    value: function createGroup(groupName) {\n      return this.callPolicyEngineFunc('createGroup', { groupName: groupName });\n    }\n  }, {\n    key: 'addPolicy',\n    value: function addPolicy(title, combiningAlgorithm, policy) {\n      if (policy === undefined) {\n        switch (combiningAlgorithm) {\n          case 'Block overrides':\n            combiningAlgorithm = 'blockOverrides';\n            break;\n          case 'Allow overrides':\n            combiningAlgorithm = 'allowOverrides';\n            break;\n          case 'First applicable':\n            combiningAlgorithm = 'firstApplicable';\n            break;\n          default:\n            combiningAlgorithm = undefined;\n        }\n      }\n\n      return this.callPolicyEngineFunc('addPolicy', { source: 'USER', key: title, policy: policy, combiningAlgorithm: combiningAlgorithm });\n    }\n  }, {\n    key: 'decreaseRulePriority',\n    value: function decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      return this.callPolicyEngineFunc('savePolicies', { source: 'USER' });\n    }\n  }, {\n    key: 'deleteGroup',\n    value: function deleteGroup(groupName) {\n      return this.callPolicyEngineFunc('deleteGroup', { groupName: groupName });\n    }\n  }, {\n    key: 'deletePolicy',\n    value: function deletePolicy(title) {\n      return this.callPolicyEngineFunc('removePolicy', { source: 'USER', key: title });\n    }\n  }, {\n    key: 'deleteRule',\n    value: function deleteRule(policyTitle, rule) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n          userPolicies[policyTitle].deleteRule(rule);\n          _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'getActivePolicy',\n    value: function getActivePolicy() {\n      return this.callPolicyEngineFunc('activeUserPolicy', {});\n    }\n  }, {\n    key: 'getPolicy',\n    value: function getPolicy(key) {\n      return this.callPolicyEngineFunc('userPolicy', { key: key });\n    }\n  }, {\n    key: 'getPoliciesTitles',\n    value: function getPoliciesTitles() {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('userPolicies', {}).then(function (policies) {\n          var titles = [];\n\n          for (var i in policies) {\n            titles.push(i);\n          }\n\n          resolve(titles);\n        });\n      });\n    }\n  }, {\n    key: 'getTargets',\n    value: function getTargets(scope) {\n      var targets = [];\n\n      for (var i in this.policies[scope]) {\n        if (targets.indexOf(i) === -1) {\n          targets.push(i);\n        }\n      }\n\n      return targets;\n    }\n  }, {\n    key: 'increaseRulePriority',\n    value: function increaseRulePriority(policyTitle, thisPriority, newPriority) {\n      var _this = this;\n      _this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      _this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      return _this.callPolicyEngineFunc('savePolicies', { source: 'USER' });\n    }\n  }, {\n    key: 'setVariables',\n    value: function setVariables() {\n      return {\n        'Date': {\n          title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Date:</p>',\n          input: [['date', []]]\n        },\n        'Domain': {\n          title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Domain:</p>',\n          input: [['form', []]]\n        },\n        'Group of users': {\n          title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Group name:</p>',\n          input: [['select', ['group', 'Select a group:']]]\n        },\n        'Subscription preferences': {\n          title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          input: []\n        },\n        'Time of the day': {\n          title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n          description: '<p>Timeslot:</p>',\n          input: [['form', []]]\n        },\n        Weekday: {\n          title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Weekday:</p>',\n          input: [['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]]\n        }\n      };\n    }\n  }, {\n    key: 'setAdditionMethods',\n    value: function setAdditionMethods() {\n      var _this = this;\n      return {\n        Date: function Date(params) {\n          return new Promise(function (resolve, reject) {\n            var policyTitle = params[0];\n            _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n              userPolicies[policyTitle].createRule(params[4], { attribute: 'date', operator: 'equals', params: params[3] }, params[1], params[2]);\n              _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n                resolve();\n              });\n            });\n          });\n        },\n        Domain: function Domain(params) {\n          return new Promise(function (resolve, reject) {\n            var policyTitle = params[0];\n            _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n              userPolicies[policyTitle].createRule(params[4], { attribute: 'domain', operator: 'equals', params: params[3] }, params[1], params[2]);\n              _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n                resolve();\n              });\n            });\n          });\n        },\n        'Group of users': function GroupOfUsers(params) {\n          return new Promise(function (resolve, reject) {\n            var policyTitle = params[0];\n            _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n              userPolicies[policyTitle].createRule(params[4], { attribute: 'source', operator: 'in', params: params[3] }, params[1], params[2]);\n              _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n                resolve();\n              });\n            });\n          });\n        },\n        'Subscription preferences': function SubscriptionPreferences(params) {\n          return new Promise(function (resolve, reject) {\n            var policyTitle = params[0];\n            _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n              var operator = 'equals';\n              if (params[3] === 'preauthorised') {\n                operator = 'in';\n              }\n\n              // TIAGO: this is giving me an error...\n              userPolicies[policyTitle].createRule(params[4], { attribute: 'subscription', operator: operator, params: params[3] }, params[1], params[2]);\n              _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n                resolve();\n              });\n            });\n          });\n        },\n        'Time of the day': function TimeOfTheDay(params) {\n          return new Promise(function (resolve, reject) {\n            var policyTitle = params[0];\n            _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n              params[3] = params[3].split(' to ');\n              var start = params[3][0].split(':');\n              start = start.join('');\n              var end = params[3][1].split(':');\n              end = end.join('');\n              userPolicies[policyTitle].createRule(params[4], { attribute: 'time', operator: 'between', params: [start, end] }, params[1], params[2]);\n              _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n                resolve();\n              });\n            });\n          });\n        },\n\n        Weekday: function Weekday(params) {\n          return new Promise(function (resolve, reject) {\n            var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n            params[3] = weekdays.indexOf(params[3]);\n            var policyTitle = params[0];\n            _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n              userPolicies[policyTitle].createRule(params[4], { attribute: 'weekday', operator: 'equals', params: params[3] }, params[1], params[2]);\n              _this.callPolicyEngineFunc('savePolicies', { source: 'USER' }).then(function () {\n                resolve();\n              });\n            });\n          });\n        }\n      };\n    }\n  }, {\n    key: 'setValidationMethods',\n    value: function setValidationMethods() {\n      var _this3 = this;\n\n      return {\n        Date: function Date(scope, info) {\n          return _this3.isValidDate(info) & _this3.isValidScope(scope);\n        },\n        'Group of users': function GroupOfUsers(scope, info) {\n          return _this3.isValidString(info) & _this3.isValidScope(scope);\n        },\n        Domain: function Domain(scope, info) {\n          return _this3.isValidDomain(info) & _this3.isValidScope(scope);\n        },\n        Weekday: function Weekday(scope, info) {\n          return true & _this3.isValidScope(scope);\n        },\n        'Subscription preferences': function SubscriptionPreferences(scope, info) {\n          return _this3.isValidSubscriptionType(info) & _this3.isValidScope(scope);\n        },\n        'Time of the day': function TimeOfTheDay(scope, info) {\n          return _this3.isValidTimeslot(info) & _this3.isValidScope(scope);\n        }\n      };\n    }\n  }, {\n    key: 'updateActivePolicy',\n    value: function updateActivePolicy(title) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('activeUserPolicy', { userPolicy: title }).then(function () {\n          _this.callPolicyEngineFunc('saveActivePolicy', {}).then(function () {\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'isValidEmail',\n    value: function isValidEmail(info) {\n      var pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidDomain',\n    value: function isValidDomain(info) {\n      var pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidString',\n    value: function isValidString(info) {\n      var pattern = /[a-z0-9.-]$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidSubscriptionType',\n    value: function isValidSubscriptionType(info) {\n      return true;\n    }\n  }, {\n    key: 'isValidDate',\n    value: function isValidDate(info) {\n      var infoSplit = info.split('/');\n      var day = parseInt(infoSplit[0]);\n      var month = parseInt(infoSplit[1]);\n      var year = parseInt(infoSplit[2]);\n\n      var date = new Date(year, month - 1, day);\n      var isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n      var formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n      var now = new Date();\n      var today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n      var isFuture = false;\n      if (date.getFullYear() > now.getFullYear()) {\n        isFuture = true;\n      } else {\n        if (date.getFullYear() == now.getFullYear()) {\n          if (date.getMonth() + 1 > now.getMonth() + 1) {\n            isFuture = true;\n          } else {\n            if (date.getMonth() + 1 == now.getMonth() + 1) {\n              if (date.getDate() >= now.getDate()) {\n                isFuture = true;\n              }\n            }\n          }\n        }\n      }\n\n      return isValidFormat && isFuture;\n    }\n  }, {\n    key: 'isValidScope',\n    value: function isValidScope(scope) {\n      return scope !== '';\n    }\n  }, {\n    key: 'isValidTimeslot',\n    value: function isValidTimeslot(info) {\n      if (!info) {\n        return false;\n      }\n      var splitInfo = info.split(' to '); // [12:00, 13:00]\n      var twoTimes = splitInfo.length === 2;\n      if (!twoTimes) {\n        return false;\n      }\n      var splitStart = splitInfo[0].split(':'); // [12, 00]\n      var splitEnd = splitInfo[1].split(':'); // [13, 00]\n      if (splitStart.length !== 2 || splitEnd.length !== 2) {\n        return false;\n      }\n      var okSize = splitStart[0].length === 2 && splitStart[1].length === 2 && splitEnd[0].length === 2 && splitEnd[1].length === 2;\n      var areIntegers = splitStart[0] == parseInt(splitStart[0], 10) && splitStart[1] == parseInt(splitStart[1], 10) && splitEnd[0] == parseInt(splitEnd[0], 10) && splitEnd[1] == parseInt(splitEnd[1], 10);\n      return twoTimes && okSize && areIntegers;\n    }\n  }, {\n    key: 'getFormattedPolicies',\n    value: function getFormattedPolicies() {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('userPolicies', {}).then(function (policiesPE) {\n          var policiesGUI = [];\n\n          for (var i in policiesPE) {\n            var policy = {\n              title: policiesPE[i].key,\n              rulesTitles: [],\n              ids: []\n            };\n\n            if (policiesPE[i].rules.length !== 0) {\n              policiesPE[i].rules = policiesPE[i].sortRules();\n              for (var j in policiesPE[i].rules) {\n                var title = _this._getTitle(policiesPE[i].rules[j]);\n                policy.rulesTitles.push(title);\n                policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n              }\n            }\n\n            policiesGUI.push(policy);\n          }\n\n          resolve(policiesGUI);\n        });\n      });\n    }\n  }, {\n    key: 'getRuleOfPolicy',\n    value: function getRuleOfPolicy(title, priority) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('userPolicies', {}).then(function (policies) {\n          var policy = policies[title];\n          resolve(policy.getRuleByPriority(priority));\n        });\n      });\n    }\n  }, {\n    key: '_getTitle',\n    value: function _getTitle(rule) {\n      var condition = rule.condition;\n      var authorise = rule.decision ? 'allowed' : 'blocked';\n      var target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n      var attribute = condition.attribute;\n      switch (attribute) {\n        case 'date':\n          return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n        case 'domain':\n          return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        case 'source':\n          if (condition.operator === 'in') {\n            return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.operator === 'equals') {\n              return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n            }\n          }\n        case 'subscription':\n          if (condition.params === '*') {\n            return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.params === 'preauthorised') {\n              return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n            }\n          }\n        case 'time':\n          var start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n          var end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n          return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n        case 'weekday':\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          var weekdayID = condition.params;\n          return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n        default:\n          return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n      }\n    }\n  }, {\n    key: 'getVariables',\n    value: function getVariables() {\n      var variablesTitles = [];\n      for (var i in this.variables) {\n        variablesTitles.push(i);\n      }\n      return variablesTitles;\n    }\n  }, {\n    key: 'getVariableInfo',\n    value: function getVariableInfo(variable) {\n      return this.variables[variable];\n    }\n  }, {\n    key: 'getMyEmails',\n    value: function getMyEmails() {\n      return this.callPolicyEngineFunc('getMyEmails', {});\n    }\n  }, {\n    key: 'getMyHyperties',\n    value: function getMyHyperties() {\n      return this.callPolicyEngineFunc('getMyHyperties', {});\n    }\n\n    //TODO If there is a problem with the input, show it to the user\n\n  }, {\n    key: 'setInfo',\n    value: function setInfo(variable, policyTitle, info, authorise, scope, target) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        if (_this.validation[variable](scope, info)) {\n          _this.addition[variable]([policyTitle, scope, target, info, authorise]).then(function () {\n            resolve();\n          });\n        } else {\n          reject('Invalid configuration');\n        }\n      });\n    }\n  }, {\n    key: 'deleteInfo',\n    value: function deleteInfo(variable, scope, target, info) {\n      var params = [scope, target, info];\n      if (variable === 'member') {\n        var conditionSplit = info.split(' ');\n        var groupName = conditionSplit[2];\n        params = [scope, groupName, info];\n      }\n      this.deletion[variable](params);\n    }\n  }, {\n    key: 'getGroups',\n    value: function getGroups() {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('groups', {}).then(function (groups) {\n          var groupsGUI = {\n            groupsNames: [],\n            members: [],\n            ids: []\n          };\n\n          for (var i in groups) {\n            groupsGUI.groupsNames.push(i);\n            groupsGUI.members.push(groups[i]);\n            var ids = [];\n            for (var j in groups[i]) {\n              ids.push(i + '::' + groups[i][j]);\n            }\n            groupsGUI.ids.push(ids);\n          }\n\n          //console.log('TIAGO groups', groupsGUI)\n          resolve(groupsGUI);\n        });\n      });\n    }\n  }, {\n    key: 'getGroupsNames',\n    value: function getGroupsNames() {\n      return this.callPolicyEngineFunc('getGroupsNames', {});\n    }\n  }, {\n    key: 'removeFromGroup',\n    value: function removeFromGroup(groupName, user) {\n      return this.callPolicyEngineFunc('removeFromGroup', { groupName: groupName, userEmail: user });\n    }\n  }, {\n    key: 'updatePolicy',\n    value: function updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.callPolicyEngineFunc('userPolicies', {}).then(function (userPolicies) {\n          userPolicies[policyTitle].deleteRule(rule);\n          if (!newSubscriptionType) {\n            userPolicies[policyTitle].createRule(newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n          } else {\n            var operator = newSubscriptionType === '*' ? 'equals' : 'in';\n            userPolicies[policyTitle].createRule(newDecision, [{ attribute: 'subscription', opeator: operator, params: newSubscriptionType }], rule.scope, rule.target, rule.priority);\n          }\n\n          _this.callPolicyEngineFunc('saveActivePolicy', {}).then(function () {\n            resolve();\n          });\n        });\n      });\n    }\n  }]);\n\n  return PoliciesManager;\n}();\n\nexports.default = PoliciesManager;\n\n},{}]},{},[1])(1)\n});\n\n","import PoliciesManager from './PoliciesManager';\n\nclass PoliciesGUI {\n\n  constructor(pepGuiURL, pepURL, messageBus) {\n    let _this = this;\n    _this.policiesManager = new PoliciesManager(pepGuiURL, pepURL, messageBus);\n    // assume prepareAttributes is called after this\n  }\n\n  prepareAttributes() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.policiesManager.prepareAttributes().then(() => {\n        _this.elements = _this._setElements();\n        _this._setListeners();\n        resolve();\n      });\n    });\n  }\n\n  _addMember() {\n    let _this = this;\n    let group = event.target.id;\n    $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n    $('.member-new-modal').openModal();\n    $('.member-new-ok').off();\n    $('.member-new-ok').on('click', (event) => {\n      let member = $('#member-new').val();\n      $('#member-new').val('');\n      _this.policiesManager.addToGroup(group, member).then(() => {\n        $('.member-new-modal').closeModal();\n        _this._manageGroups();\n      });\n    });\n  }\n\n  _createGroup() {\n    let _this = this;\n    $('#group-new-name').val('');\n    $('.group-new-modal').openModal();\n    $('.group-new-ok').on('click', (event) => {\n      let groupName = $('#group-new-name').val();\n      _this.policiesManager.createGroup(groupName).then(() => {\n        _this._manageGroups();\n      });\n    });\n  }\n\n  _addPolicy() {\n    let _this = this;\n    $('#policy-new-title').val('');\n    $('.combining').html('');\n    let algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\n    $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\n    $('.policy-new').openModal();\n\n    $('.policy-new-ok').off();\n    $('.policy-new-ok').on('click', (event) => {\n      let policyTitle = $('#policy-new-title').val();\n      if (!policyTitle) {\n        Materialize.toast('Invalid policy title', 4000);\n      } else {\n        let combiningAlgorithm = $('#comb-algorithm').val();\n        _this.policiesManager.addPolicy(policyTitle, combiningAlgorithm).then(() => {\n          $('.help-menu').addClass('hide');\n          $('.policy-new').closeModal();\n          _this._goHome();\n        });\n      }\n    });\n    $('.help-btn').off();\n    $('.help-btn').on('click', (event) => {\n      $('.help-menu').removeClass('hide');\n    });\n  }\n\n  _decreaseRulePriority() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    _this.policiesManager.getPolicy(policyTitle).then((policy) => {\n      let lastPriority = policy.getLastPriority();\n      if (lastPriority != thisPriority) {\n        let newPriority = parseInt(thisPriority + 1);\n        _this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority).then(() => {\n          _this._goHome();\n        });\n      }\n    });\n  }\n\n  _deleteMember() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split('::');\n    let member = splitId[splitId.length - 1];\n    splitId.pop();\n    let group = splitId.join('::');\n    _this.policiesManager.removeFromGroup(group, member).then(() => {\n      _this._manageGroups();\n    });\n  }\n\n  _deleteGroup() {\n    let _this = this;\n    let groupName = event.target.closest('tr').children[0].id;\n    _this.policiesManager.deleteGroup(groupName).then(() => {\n      _this._manageGroups();\n    });\n  }\n\n  _deletePolicy() {\n    let _this = this;\n    let policyTitle = event.target.closest('tr').id;\n    _this.policiesManager.deletePolicy(policyTitle).then(() => {\n      _this._goHome();\n    });\n  }\n\n  _deleteRule() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let rule = _this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n    _this.policiesManager.deleteRule(policyTitle, rule).then(() => {\n      _this._goHome();\n    });\n  }\n\n  _getActivePolicy() {\n    let _this = this;\n    _this.policiesManager.getActivePolicy().then((activeUserPolicy) => {\n      $('.policy-active').html('');\n      _this.policiesManager.getPoliciesTitles().then((policies) => {\n        policies.push('Deactivate all policies');\n\n        $('.policy-active').append(_this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\n\n        $('#policies-list').on('click', (event) => {\n          let policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\n          if (policyTitle === 'Deactivate all policies') {\n            policyTitle = undefined;\n          }\n          _this.policiesManager.updateActivePolicy(policyTitle);\n        });\n      });\n    });\n  }\n\n  _getGroupOptions(title, keys, scopes, lists) {\n    let list = '<option disabled selected>' + title + '</option>';\n\n    for (let i in keys) {\n      list += '<optgroup label=' + keys[i] + '>';\n      for (let j in lists[i]) {\n        list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n      }\n    }\n\n    return list;\n  }\n\n  _getInfo(variable) {\n    let info;\n\n    switch(variable) {\n      case 'Date':\n        info = $('.config').find('input').val();\n        if (info.indexOf(',') !== -1) { //20 July, 2016\n          let splitInfo = info.split(' '); //['20', 'July,',' '2016']\n          splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n          let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n          info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n        } else { // 2016-07-20\n          let splitInfo = info.split('-');\n          info = splitInfo[2] + '/' + splitInfo[1] + '/' + splitInfo[0];\n        }\n        break;\n      case 'Group of users':\n        info = $('#group').find(\":selected\").text();\n        break;\n      case 'Subscription preferences':\n        if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n          info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n        }\n        break;\n      case 'Weekday':\n        info = $('#weekday').find(\":selected\").text();\n        break;\n      default:\n        info = $('.config').find('input').val();\n        break;\n    }\n\n    return info;\n  }\n\n  _getList(items) {\n      let list = '';\n      let numItems = items.length;\n\n      for (let i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n\n  _getOptions(id, title, list, selected) {\n    let options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n    for (let i in list) {\n      if (selected !== undefined & selected === list[i]) {\n        options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\n      } else {\n        options += '<option id=\"' + id + '\">' + list[i] + '</option>';\n      }\n    }\n    options += '</select>';\n\n    return options;\n  }\n\n  _getPoliciesTable() {\n    let _this = this;\n\n    _this.policiesManager.getFormattedPolicies().then((policies) => {\n      $('.policies-no').addClass('hide');\n      $('.policies-current').html('');\n\n      let policiesTitles = [];\n      let rulesTitles = [];\n      let ids = [];\n\n      for (let i in policies) {\n        policiesTitles.push(policies[i].title);\n        rulesTitles.push(policies[i].rulesTitles);\n        ids.push(policies[i].ids);\n      }\n\n      let table = '<table>';\n      let isEmpty = policiesTitles.length === 0;\n\n      for (let i in policiesTitles) {\n        table += '<thead><tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n\n        for (let j in rulesTitles[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n        table += '<tr id=\"' + policiesTitles[i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.policies-current').append(table);\n      } else {\n        $('.policies-no').removeClass('hide');\n      }\n      $('.rule-add').on('click', (event) => { _this._showVariablesTypes(); });\n      $('.rule-delete').on('click', (event) => { _this._deleteRule(); });\n      $('.rule-show').on('click', (event) => { _this._showRule(); });\n      $('.rule-priority-increase').on('click', (event) => { _this._increaseRulePriority(); });\n      $('.rule-priority-decrease').on('click', (event) => { _this._decreaseRulePriority(); });\n      $('.policy-add').off();\n      $('.policy-add').on('click', (event) => { _this._addPolicy(); });\n      $('.policy-delete').on('click', (event) => { _this._deletePolicy(); });\n    }); \n  }\n\n  _goHome() {\n    this._getActivePolicy();\n    this._getPoliciesTable();\n  }\n\n  _increaseRulePriority() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    if (thisPriority !== 0) {\n      splitId.pop();\n      let policyTitle = splitId.join(':');\n      let newPriority = thisPriority - 1;\n\n      _this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority).then(() => {\n        _this._goHome();\n      });\n    }\n  }\n\n  _manageGroups() {\n    let _this = this;\n    _this.policiesManager.getGroups().then((groupsPE) => {\n      $('.groups-current').html('');\n      let groups = groupsPE.groupsNames;\n      let members = groupsPE.members;\n      let ids = groupsPE.ids;\n\n      let table = '<table>';\n      let isEmpty = groups.length === 0;\n\n      for (let i in groups) {\n        table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n        for (let j in members[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n\n        table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.groups-current').append(table);\n      } else {\n        $('.groups-current').append('<p>There are no groups set.</p>');\n      }\n\n      $('.member-add').off();\n      $('.member-add').on('click', (event) => { _this._addMember(); });\n      $('.member-delete').on('click', (event) => { _this._deleteMember(); });\n      $('.group-add').off();\n      $('.group-add').on('click', (event) => { _this._createGroup(); });\n      $('.group-delete').on('click', (event) => { _this._deleteGroup(); });\n    });\n  }\n\n  _parseFileContent(content) {\n    let parsedContent = JSON.parse(content);\n    for (let i in parsedContent) {\n      this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\n    }\n    $('.policy-new').closeModal();\n  }\n\n  _setElements() {\n    return {\n      date: (params) => { return '<input type=\"date\" class=\"datepicker\">'; },\n      select: (params) => { return this._getOptions(params[0], params[1], params[2]); },\n      form: (params) => { return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>'; }\n    };\n  }\n\n  _showNewConfigurationPanel(policyTitle) {\n    let variable = event.target.text;\n    $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n    $('.scopes').empty().html('');\n\n    let keys = ['Email', 'Hyperty', 'All'];\n    let scopes = ['identity', 'hyperty', 'global'];\n    let lists = [];\n\n    this.policiesManager.getMyEmails().then((emails) => {\n      lists.push(emails);\n      this.policiesManager.getMyHyperties().then((hyperties) => {\n        lists.push(hyperties);\n        lists.push(['All identities and hyperties']);\n        $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n        $('.variable').removeClass('hide');\n      });\n    });\n  }\n\n  _showVariablesTypes() {\n    let policyTitle = event.target.closest('tr').id;\n\n    $('#variables-types').empty().html('');\n    let variables = this.policiesManager.getVariables();\n    $('#variables-types').append(this._getList(variables));\n    $('.variable').addClass('hide');\n    $('.rule-new').openModal();\n    $('#variables-types').off();\n    $('#variables-types').on('click', (event) => { this._showNewConfigurationPanel(policyTitle); });\n  }\n\n  _getNewConfiguration(policyTitle, variable) {\n    let _this = this;\n    let info = _this.policiesManager.getVariableInfo(variable);\n    $('.rule-new-title').html(info.title);\n    $('.description').html(info.description);\n    $('.config').html('');\n\n    if (variable === 'Subscription preferences') {\n      $('.subscription-type').removeClass('hide');\n    } else {\n      $('.subscription-type').addClass('hide');\n      let tags = info.input;\n      for (let i in tags) {\n        _this.policiesManager.getGroupsNames().then((groupsNames) => {\n          if (variable === 'Group of users') {\n            tags[i][1].push(groupsNames);\n          }\n          $('.config').append(_this.elements[tags[i][0]](tags[i][1]));\n          if (variable === 'Group of users') {\n            tags[i][1].pop();\n          }\n        });\n      }\n      if (variable ==='date') {\n        $('.datepicker').pickadate({\n          selectMonths: true,\n          selectYears: 15\n        });\n      }\n    }\n    document.getElementById('allow').checked = false;\n    document.getElementById('block').checked = false;\n    $('.ok-btn').off();\n    $('.ok-btn').on('click', (event) => {\n      if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n        let info = _this._getInfo(variable);\n        let decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n        decision = decision === 'allow';\n        let scope = $('.scopes').find(\":selected\")[0].id;\n        let target = $('.scopes').find(\":selected\")[0].textContent;\n        target = (target === 'All identities and hyperties') ? 'global' : target;\n        _this.policiesManager.setInfo(variable, policyTitle, info, decision, scope, target).then(() => {\n          $('.rule-new').closeModal();\n          _this._goHome();\n        });\n      } else {\n        throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n      }\n    });\n  }\n\n  _deleteInfo(resourceType) {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let scope = splitId[0];\n    splitId.shift();\n    let target = splitId.join('');\n    let condition = event.target.closest('tr').children[0].id;\n    this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n    this._goHome();\n  }\n\n  _setListeners() {\n    $('.settings-btn').on('click', (event) => {\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n    });\n\n    $('.policies-page-show').on('click', (event) => {\n      $('.policies-section').removeClass('hide');\n      $('.identities-section').addClass('hide');\n      this._goHome();\n      this._manageGroups();\n    });\n\n    $('.admin-page-exit').on('click', (event) => {\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').addClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n    });\n\n    $('.exit-btn').on('click', (event) => {\n      $('.subscription-type').addClass('hide');\n      $('.help-menu').addClass('hide');\n    });\n\n    $('#policy-file').on('change', (event) => {\n      let file = event.target.files[0];\n      let reader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n      reader.onload = (event) => {\n        this._parseFileContent(event.target.result);\n        this._goHome();\n      }\n      reader.onerror = (event) => {\n        throw Error(\"Error reading the file\");\n      }\n    });\n  }\n\n  _showRule() {\n    let ruleTitle = event.target.textContent;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    this.policiesManager.getRuleOfPolicy(policyTitle, priority).then((rule) => {\n      if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n        $('.authorise-btns').addClass('hide');\n      } else {\n        let element;\n        if (rule.decision) {\n          element = document.getElementById('btn-allow');\n        } else {\n          element = document.getElementById('btn-block');\n        }\n        element.checked = true;\n        $('.authorise-btns').removeClass('hide');\n      }\n      $('.member-add').addClass('hide');\n      $('.member-new-btn').addClass('hide');\n\n      $('.rule-details').openModal();\n      $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n      if (rule.condition.attribute === 'subscription') {\n        $('.subscription-type').removeClass('hide');\n      }\n      $('.subscription-decision').on('click', (event) => { this._updateRule('subscription', policyTitle, rule); });\n      $('.decision').off();\n      $('.decision').on('click', (event) => { this._updateRule('authorisation', policyTitle, rule);});\n    });\n  }\n\n  _updateRule(type, policyTitle, rule) {\n    let _this = this;\n    let title = $('.rule-title').text();\n    let splitTitle = title.split(' ');\n    let index = splitTitle.indexOf('is');\n    if (index === -1) {\n      index = splitTitle.indexOf('are');\n    }\n    switch (type) {\n      case 'authorisation':\n        let newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n\n        if (newDecision === 'btn-allow') {\n          splitTitle[index + 1] = 'allowed';\n          newDecision = true;\n        } else {\n          splitTitle[index + 1] = 'blocked';\n          newDecision = false;\n        }\n        title = splitTitle.join(' ');\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        _this.policiesManager.updatePolicy(policyTitle, rule, newDecision).then(() => {\n          _this._goHome();\n        });\n        break;\n      case 'subscription':\n        let newSubscriptionType = event.target.labels[0].textContent;\n\n        let decision = splitTitle[index + 1];\n        splitTitle = title.split('hyperties are');\n        if (newSubscriptionType === 'All subscribers') {\n          $('.authorise-btns').removeClass('hide');\n          newDecision = rule.decision;\n          newSubscriptionType = '*';\n          title = 'Subscriptions from all hyperties are' + splitTitle[1];\n        } else {\n          $('.authorise-btns').addClass('hide');\n          newDecision = true;\n          newSubscriptionType = 'preauthorised';\n          title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n        }\n\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        _this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType).then(() => {\n          _this._goHome();\n        });\n        break;\n    }\n  }\n}\n\nexport default PoliciesGUI;\n","class PoliciesManager {\n\n  constructor(pepGuiURL, pepURL, messageBus) {\n    let _this = this;\n    _this._guiURL = pepGuiURL;\n    _this._pepURL = pepURL;\n    _this._messageBus = messageBus;\n\n    // assume prepare attributes is called after this\n  }\n\n  callPolicyEngineFunc(methodName, parameters) {\n    let _this = this;\n    let message;\n\n    return new Promise((resolve, reject) => {\n      message = { type: 'execute', to: _this._pepURL, from: _this._guiURL,\n        body: { resource: 'policy', method: methodName, params: parameters }, };\n      _this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n    });\n  }\n\n  prepareAttributes() {\n    return new Promise((resolve, reject) => {\n      let _this = this;\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n        _this.policies = userPolicies;\n        _this.variables = _this.setVariables();\n        _this.addition = _this.setAdditionMethods();\n        _this.validation = _this.setValidationMethods();\n        resolve();\n      });\n    });\n  }\n\n  addToGroup(groupName, user) {\n    return this.callPolicyEngineFunc('addToGroup', {groupName: groupName, userEmail: user});\n  }\n\n  createGroup(groupName) {\n    return this.callPolicyEngineFunc('createGroup', {groupName: groupName});\n  }\n\n  addPolicy(title, combiningAlgorithm, policy) {\n    if (policy === undefined) {\n      switch (combiningAlgorithm) {\n        case 'Block overrides':\n          combiningAlgorithm = 'blockOverrides';\n          break;\n        case 'Allow overrides':\n          combiningAlgorithm = 'allowOverrides';\n          break;\n        case 'First applicable':\n          combiningAlgorithm = 'firstApplicable';\n          break;\n        default:\n          combiningAlgorithm = undefined;\n      }\n    }\n\n    return this.callPolicyEngineFunc('addPolicy',\n      {source: 'USER', key: title, policy: policy, combiningAlgorithm: combiningAlgorithm});\n  }\n\n  decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    return this.callPolicyEngineFunc('savePolicies', {source: 'USER'});\n  }\n\n  deleteGroup(groupName) {\n    return this.callPolicyEngineFunc('deleteGroup', {groupName: groupName});\n  }\n\n  deletePolicy(title) {\n    return this.callPolicyEngineFunc('removePolicy', {source: 'USER', key: title});\n  }\n\n  deleteRule(policyTitle, rule) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n        userPolicies[policyTitle].deleteRule(rule);\n        _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  getActivePolicy() {\n    return this.callPolicyEngineFunc('activeUserPolicy', {});\n  }\n\n  getPolicy(key) {\n    return this.callPolicyEngineFunc('userPolicy', {key: key});\n  }\n\n  getPoliciesTitles() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policies) => {\n        let titles = [];\n\n        for (let i in policies) {\n          titles.push(i);\n        }\n\n        resolve(titles);\n      });\n    });\n  }\n\n  getTargets(scope) {\n    let targets = [];\n\n    for (let i in this.policies[scope]) {\n      if (targets.indexOf(i) === -1) {\n        targets.push(i);\n      }\n    }\n\n    return targets;\n  }\n\n  increaseRulePriority(policyTitle, thisPriority, newPriority) {\n    let _this = this;\n    _this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    _this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    return _this.callPolicyEngineFunc('savePolicies', {source: 'USER'});\n  }\n\n  setVariables() {\n    return {\n      'Date': {\n        title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Date:</p>',\n        input: [\n          ['date', []]\n        ]\n      },\n      'Domain': {\n        title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Domain:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      'Group of users': {\n        title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Group name:</p>',\n        input: [\n          ['select', ['group', 'Select a group:']]\n        ]\n      },\n      'Subscription preferences': {\n        title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        input: []\n      },\n      'Time of the day': {\n        title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n        description: '<p>Timeslot:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      Weekday: {\n        title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Weekday:</p>',\n        input: [\n          ['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]\n        ]\n      }\n    };\n  }\n\n  setAdditionMethods() {\n    let _this = this;\n    return {\n      Date: (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'date', operator: 'equals', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      Domain: (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'domain', operator: 'equals', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      'Group of users': (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'source', operator: 'in', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      'Subscription preferences': (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            let operator = 'equals';\n            if (params[3] === 'preauthorised') {\n              operator = 'in';\n            }\n\n            // TIAGO: this is giving me an error...\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'subscription', operator: operator, params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      'Time of the day': (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            params[3] = params[3].split(' to ');\n            let start = params[3][0].split(':');\n            start = start.join('');\n            let end = params[3][1].split(':');\n            end = end.join('');\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'time', operator: 'between', params: [start, end] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n\n      Weekday: (params) => {\n        return new Promise((resolve, reject) => {\n          let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          params[3] = weekdays.indexOf(params[3]);\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'weekday', operator: 'equals', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      }\n    };\n  }\n\n  setValidationMethods() {\n    return {\n      Date: (scope, info) => { return this.isValidDate(info) & this.isValidScope(scope); },\n      'Group of users': (scope, info) => { return this.isValidString(info) & this.isValidScope(scope); },\n      Domain: (scope, info) => { return this.isValidDomain(info) & this.isValidScope(scope); },\n      Weekday: (scope, info) => { return true & this.isValidScope(scope); },\n      'Subscription preferences': (scope, info) => { return this.isValidSubscriptionType(info) & this.isValidScope(scope); },\n      'Time of the day': (scope, info) => { return this.isValidTimeslot(info) & this.isValidScope(scope); }\n    };\n  }\n\n  updateActivePolicy(title) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('activeUserPolicy', {userPolicy: title}).then(() => {\n        _this.callPolicyEngineFunc('saveActivePolicy', {}).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  isValidEmail(info) {\n    let pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidDomain(info) {\n    let pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidString(info) {\n    let pattern = /[a-z0-9.-]$/;\n    return pattern.test(info);\n  }\n\n  isValidSubscriptionType(info) {\n    return true;\n  }\n\n  isValidDate(info) {\n    let infoSplit = info.split('/');\n    let day = parseInt(infoSplit[0]);\n    let month = parseInt(infoSplit[1]);\n    let year = parseInt(infoSplit[2]);\n\n    let date = new Date(year, month-1, day);\n    let isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n    let formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\n    let now = new Date();\n    let today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n    let isFuture = false;\n    if (date.getFullYear() > now.getFullYear()) {\n      isFuture = true;\n    } else {\n      if (date.getFullYear() == now.getFullYear()) {\n        if ((date.getMonth() + 1) > (now.getMonth() + 1)) {\n          isFuture = true;\n        } else {\n          if ((date.getMonth() + 1) == (now.getMonth() + 1)) {\n            if (date.getDate() >= (now.getDate())) {\n              isFuture = true;\n            }\n          }\n        }\n      }\n    }\n\n    return (isValidFormat && isFuture);\n  }\n\n  isValidScope(scope) {\n    return scope !== '';\n  }\n\n  isValidTimeslot(info) {\n    if (!info) {\n      return false;\n    }\n    let splitInfo = info.split(' to '); // [12:00, 13:00]\n    let twoTimes = splitInfo.length === 2;\n    if (!twoTimes) {\n      return false;\n    }\n    let splitStart = splitInfo[0].split(':'); // [12, 00]\n    let splitEnd = splitInfo[1].split(':'); // [13, 00]\n    if (splitStart.length !== 2 || splitEnd.length !== 2) {\n      return false;\n    }\n    let okSize = (splitStart[0].length === 2) && (splitStart[1].length === 2) && (splitEnd[0].length === 2) && (splitEnd[1].length === 2);\n    let areIntegers = (splitStart[0] == parseInt(splitStart[0], 10)) && (splitStart[1] == parseInt(splitStart[1], 10)) && (splitEnd[0] == parseInt(splitEnd[0], 10)) && (splitEnd[1] == parseInt(splitEnd[1], 10));\n    return twoTimes && okSize && areIntegers;\n  }\n\n  getFormattedPolicies() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policiesPE) => {\n        let policiesGUI = [];\n\n        for (let i in policiesPE) {\n          let policy = {\n            title: policiesPE[i].key,\n            rulesTitles: [],\n            ids: []\n          }\n\n          if (policiesPE[i].rules.length !== 0) {\n            policiesPE[i].rules = policiesPE[i].sortRules();\n            for (let j in policiesPE[i].rules) {\n              let title = _this._getTitle(policiesPE[i].rules[j]);\n              policy.rulesTitles.push(title);\n              policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n            }\n          }\n\n          policiesGUI.push(policy);\n        }\n\n        resolve(policiesGUI);\n      });\n    });\n  }\n\n  getRuleOfPolicy(title, priority) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policies) => {\n        let policy = policies[title];\n        resolve(policy.getRuleByPriority(priority));\n      });\n    });\n  }\n\n  _getTitle(rule) {\n    let condition = rule.condition;\n    let authorise = (rule.decision) ? 'allowed' : 'blocked';\n    let target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n    let attribute = condition.attribute;\n    switch(attribute) {\n      case 'date':\n        return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n      case 'domain':\n        return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n      case 'source':\n        if (condition.operator === 'in') {\n          return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.operator === 'equals') {\n            return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n          }\n        }\n      case 'subscription':\n        if (condition.params === '*') {\n          return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.params === 'preauthorised') {\n            return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n          }\n        }\n      case 'time':\n        let start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n        let end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n        return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n      case 'weekday':\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        let weekdayID = condition.params;\n        return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n      default:\n        return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n    }\n  }\n\n  getVariables() {\n    let variablesTitles = [];\n    for (let i in this.variables) {\n      variablesTitles.push(i);\n    }\n    return variablesTitles;\n  }\n\n  getVariableInfo(variable) {\n    return this.variables[variable];\n  }\n\n  getMyEmails() {\n    return this.callPolicyEngineFunc('getMyEmails', {});\n  }\n\n  getMyHyperties() {\n    return this.callPolicyEngineFunc('getMyHyperties', {});\n  }\n\n  //TODO If there is a problem with the input, show it to the user\n  setInfo(variable, policyTitle, info, authorise, scope, target) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      if (_this.validation[variable](scope, info)) {\n        _this.addition[variable]([policyTitle, scope, target, info, authorise]).then(() => {\n          resolve();\n        });\n      } else {\n        reject('Invalid configuration');\n      }\n    });\n  }\n\n  deleteInfo(variable, scope, target, info) {\n    let params = [scope, target, info];\n    if (variable === 'member') {\n      let conditionSplit = info.split(' ');\n      let groupName = conditionSplit[2];\n      params = [scope, groupName, info];\n    }\n    this.deletion[variable](params);\n  }\n\n  getGroups() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('groups', {}).then((groups) => {\n        let groupsGUI = {\n          groupsNames: [],\n          members: [],\n          ids: []\n        };\n\n        for (let i in groups) {\n          groupsGUI.groupsNames.push(i);\n          groupsGUI.members.push(groups[i]);\n          let ids = [];\n          for (let j in groups[i]) {\n            ids.push(i + '::' + groups[i][j]);\n          }\n          groupsGUI.ids.push(ids);\n        }\n\n        //console.log('TIAGO groups', groupsGUI)\n        resolve(groupsGUI);\n      });\n    });\n  }\n\n  getGroupsNames() {\n    return this.callPolicyEngineFunc('getGroupsNames', {});\n  }\n\n  removeFromGroup(groupName, user) {\n    return this.callPolicyEngineFunc('removeFromGroup', {groupName: groupName, userEmail: user});\n  }\n\n  updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n        userPolicies[policyTitle].deleteRule(rule);\n        if (!newSubscriptionType) {\n          userPolicies[policyTitle].createRule(newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n        } else {\n          let operator = (newSubscriptionType === '*') ? 'equals' : 'in';\n          userPolicies[policyTitle].createRule(newDecision, [{ attribute: 'subscription', opeator: operator, params: newSubscriptionType }], rule.scope, rule.target, rule.priority);\n        }\n\n        _this.callPolicyEngineFunc('saveActivePolicy', {}).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n}\n\nexport default PoliciesManager;\n"]}