{"version":3,"sources":["node_modules/browser-pack/_prelude.js","identities-gui.js","src/admin/IdentitiesGUI.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","identitiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","IdentitiesGUI","guiURL","idmURL","messageBus","_this","_guiURL","_idmURL","_messageBus","callIdentityModuleFunc","then","resultURL","undefined","addListener","msg","funcName","body","method","urlreceived","params","openPopup","returnedValue","type","replyMsg","id","to","from","postMessage","document","getElementsByTagName","style","parent","$","removeClass","showIdentitiesGUI","identityInfo","addClass","on","methodName","parameters","message","Promise","resolve","reject","resource","res","result","win","open","cordova","addEventListener","url","exec","error","close","pollTimer","setInterval","closed","clearInterval","URL","indexOf","location","origin","receivedInfo","toRemoveID","_checkReceivedInfo","resultObject","showMyIdentities","identities","identity","console","log","callback","idps","idpsObjects","forEach","entry","push","domain","html","_getList","off","event","obtainNewIdentity","_resetIdentities","emails","split","email","myIdentities","getElementById","innerHTML","table","createTable","tbody","createElement","numIdentities","_i","tr","createTableRow","appendChild","changeID","removeID","className","thead","thEmail","textContent","td","btn","idToUse","innerText","row","parentNode","idToRemove","children","numEmails","splice","idProvider","text","keyPair","publicKey","btoa","contents","usernameHint","idpDomain","loginUrl","substring","finalURL","firstPart","secondAuxPart","secondPart","_authenticateUser","err","items","list","numItems","userProfile","username"],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.identitiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// jshint browser:true, jquery: true\n\nvar IdentitiesGUI = function () {\n  function IdentitiesGUI(guiURL, idmURL, messageBus) {\n    _classCallCheck(this, IdentitiesGUI);\n\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    var _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    _this.callIdentityModuleFunc('deployGUI', {}).then(function () {\n      _this.resultURL = undefined;\n\n      _this._messageBus.addListener(guiURL, function (msg) {\n        var identityInfo = msg.body.value;\n        var funcName = msg.body.method;\n        var value = void 0;\n\n        if (funcName === 'openPopup') {\n          var urlreceived = msg.body.params.urlreceived;\n          _this.openPopup(urlreceived).then(function (returnedValue) {\n            var value = { type: 'execute', value: returnedValue, code: 200 };\n            var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n          });\n          return; // this avoids getting stuck in the identities page\n        }\n\n        // unhide the config page with the identity GUI\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        _this.showIdentitiesGUI(msg.body.value).then(function (identityInfo) {\n          var replyMsg = void 0;\n\n          //hide config page with the identity GUI\n          parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n          $('.admin-page').addClass('hide');\n          document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n          $('.identities-section').addClass('hide');\n          $('.policies-section').addClass('hide');\n\n          switch (identityInfo.type) {\n            case 'idp':\n              value = { type: 'idp', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            case 'identity':\n              value = { type: 'identity', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            default:\n              value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n          }\n        });\n      });\n\n      $('.identities-page-show').on('click', function () {\n        //TODO call a IdM method that requests the identities\n        _this.showIdentitiesGUI();\n      });\n    });\n  }\n\n  _createClass(IdentitiesGUI, [{\n    key: 'callIdentityModuleFunc',\n    value: function callIdentityModuleFunc(methodName, parameters) {\n      var _this = this;\n      var message = void 0;\n\n      return new Promise(function (resolve, reject) {\n        message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n          body: { resource: 'identity', method: methodName, params: parameters } };\n        _this._messageBus.postMessage(message, function (res) {\n          var result = res.body.value;\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: 'openPopup',\n    value: function openPopup(urlreceived) {\n\n      return new Promise(function (resolve, reject) {\n\n        var win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');\n        if (window.cordova) {\n          win.addEventListener('loadstart', function (e) {\n            var url = e.url;\n            var code = /\\&code=(.+)$/.exec(url);\n            var error = /\\&error=(.+)$/.exec(url);\n\n            if (code || error) {\n              win.close();\n              resolve(url);\n            }\n          });\n        } else {\n          var pollTimer = setInterval(function () {\n            try {\n              if (win.closed) {\n                reject('Some error occured when trying to get identity.');\n                clearInterval(pollTimer);\n              }\n\n              if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {\n                window.clearInterval(pollTimer);\n                var url = win.document.URL;\n\n                win.close();\n                resolve(url);\n              }\n            } catch (e) {\n              //console.log(e);\n            }\n          }, 500);\n        }\n      });\n    }\n  }, {\n    key: 'showIdentitiesGUI',\n    value: function showIdentitiesGUI(receivedInfo) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        var identityInfo = void 0;\n        var toRemoveID = void 0;\n\n        _this._checkReceivedInfo(receivedInfo).then(function (resultObject) {\n          identityInfo = resultObject.identityInfo;\n          toRemoveID = resultObject.toRemoveID;\n\n          $('.policies-section').addClass('hide');\n          $('.identities-section').removeClass('hide');\n\n          _this.showMyIdentities(identityInfo.identities, toRemoveID).then(function (identity) {\n            console.log('chosen identity: ', identity);\n            resolve({ type: 'identity', value: identity });\n          });\n\n          var callback = function callback(value) {\n            console.log('chosen identity: ', value);\n            resolve({ type: 'identity', value: value });\n          };\n\n          var idps = [];\n          var idpsObjects = identityInfo.idps;\n\n          idpsObjects.forEach(function (entry) {\n            if (entry.type && entry.type == 'idToken') {\n              idps.push(entry.domain);\n            }\n          });\n\n          $('#idproviders').html(_this._getList(idps));\n          $('#idproviders').off();\n          $('#idproviders').on('click', function (event) {\n            return _this.obtainNewIdentity(event, callback, toRemoveID);\n          });\n          //$('.back').on('click', (event) => _this.goHome());\n          $('.identities-reset').off();\n          $('.identities-reset').on('click', function (event) {\n            return _this._resetIdentities(callback);\n          });\n        });\n      });\n    }\n  }, {\n    key: '_checkReceivedInfo',\n    value: function _checkReceivedInfo(receivedInfo) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        var identityInfo = void 0,\n            toRemoveID = void 0;\n        if (receivedInfo) {\n          identityInfo = receivedInfo;\n          toRemoveID = false;\n          resolve({ identityInfo: identityInfo, toRemoveID: toRemoveID });\n        } else {\n          toRemoveID = true;\n          _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then(function (result) {\n            resolve({ identityInfo: result, toRemoveID: toRemoveID });\n          });\n        }\n      });\n    }\n  }, {\n    key: 'showMyIdentities',\n    value: function showMyIdentities(emails, toRemoveID) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        // let identities = _this.identityModule.getIdentities();\n        var identities = [];\n\n        for (var i in emails) {\n          var domain = emails[i].split('@');\n          identities.push({ email: emails[i], domain: domain[1] });\n        }\n\n        var myIdentities = document.getElementById('my-ids');\n        myIdentities.innerHTML = '';\n\n        var table = _this.createTable();\n\n        var tbody = document.createElement('tbody');\n        var numIdentities = identities.length;\n        for (var _i = 0; _i < numIdentities; _i++) {\n          var tr = _this.createTableRow(identities[_i], toRemoveID);\n          tbody.appendChild(tr);\n        }\n\n        table.appendChild(tbody);\n        myIdentities.appendChild(table);\n\n        var callback = function callback(identity) {\n          resolve(identity);\n        };\n\n        if (!toRemoveID) {\n          $('.clickable-cell').on('click', function (event) {\n            return _this.changeID(callback);\n          });\n        }\n\n        $('.remove-id').on('click', function (event) {\n          return _this.removeID(emails);\n        });\n      });\n    }\n  }, {\n    key: 'createTable',\n    value: function createTable() {\n      var table = document.createElement('table');\n      table.className = 'centered';\n      var thead = document.createElement('thead');\n      var tr = document.createElement('tr');\n      var thEmail = document.createElement('th');\n      thEmail.textContent = 'Email';\n      tr.appendChild(thEmail);\n      thead.appendChild(tr);\n      table.appendChild(thead);\n      return table;\n    }\n  }, {\n    key: 'createTableRow',\n    value: function createTableRow(identity, toRemoveID) {\n      var tr = document.createElement('tr');\n\n      var td = document.createElement('td');\n      td.textContent = identity.email;\n      td.className = 'clickable-cell';\n      td.style = 'cursor: pointer';\n      tr.appendChild(td);\n\n      td = document.createElement('td');\n\n      if (toRemoveID) {\n        var btn = document.createElement('button');\n        btn.textContent = 'Remove';\n        btn.className = 'remove-id waves-effect waves-light btn';\n        td.appendChild(btn);\n      }\n\n      tr.appendChild(td);\n\n      return tr;\n    }\n  }, {\n    key: 'changeID',\n    value: function changeID(callback) {\n      var _this = this;\n\n      var idToUse = event.target.innerText;\n\n      //TODO improve later.\n      //prevents when the users selects an hyperty, exit the identity page and\n      //goes again to the identity page, from selecting \"settings\" button as identity.\n      if (idToUse !== 'settings') {\n\n        callback(idToUse);\n        return idToUse;\n      }\n    }\n  }, {\n    key: 'removeID',\n    value: function removeID(emails) {\n      var _this = this;\n      var row = event.target.parentNode.parentNode;\n      var idToRemove = row.children[0].textContent;\n      var domain = row.children[1].textContent;\n\n      _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(function () {\n        var numEmails = emails.length;\n        for (var i = 0; i < numEmails; i++) {\n          if (emails[i].email === idToRemove) {\n            emails.splice(i, 1);\n            break;\n          }\n        }\n\n        // -------------------------------------------------------------------------//\n        _this.showMyIdentities(emails, true);\n      });\n\n      //_this.identityModule.unregisterIdentity(idToRemove);\n    }\n  }, {\n    key: 'obtainNewIdentity',\n    value: function obtainNewIdentity(event, callback, toRemoveID) {\n      var _this = this;\n      var idProvider = event.target.textContent;\n      var idProvider2 = event.target.text;\n\n      _this.callIdentityModuleFunc('generateRSAKeyPair', {}).then(function (keyPair) {\n        var publicKey = btoa(keyPair.public);\n\n        _this.callIdentityModuleFunc('sendGenerateMessage', { contents: publicKey, origin: 'origin', usernameHint: undefined,\n          idpDomain: idProvider }).then(function (value) {\n          console.log('receivedURL: ' + value.loginUrl.substring(0, 20) + '...');\n\n          var url = value.loginUrl;\n          var finalURL = void 0;\n\n          //check if the receivedURL contains the redirect field and replace it\n          if (url.indexOf('redirect_uri') !== -1) {\n            var firstPart = url.substring(0, url.indexOf('redirect_uri'));\n            var secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n            var secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n            //check if the reddirect field is the last field of the URL\n            if (secondPart.indexOf('&') !== -1) {\n              finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n            } else {\n              finalURL = firstPart + 'redirect_uri=' + location.origin;\n            }\n          }\n\n          _this.resultURL = finalURL || url;\n\n          $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n          $('.login').removeClass('hide');\n          $('.login-btn').off();\n          $('.login-btn').on('click', function (event) {\n            $('.login').addClass('hide');\n            _this._authenticateUser(keyPair, publicKey, value, 'origin', idProvider).then(function (email) {\n              callback(email);\n              _this.showIdentitiesGUI();\n            });\n          });\n        });\n      }).catch(function (err) {\n        return console.log('obtanin new identity', err);\n      });\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_authenticateUser',\n    value: function _authenticateUser(keyPair, publicKey, value, origin, idProvider) {\n      var _this = this;\n      var url = _this.resultURL;\n\n      return new Promise(function (resolve, reject) {\n\n        _this.openPopup(url).then(function (identity) {\n\n          _this.callIdentityModuleFunc('sendGenerateMessage', { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then(function (result) {\n\n            if (result) {\n\n              //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n              _this.callIdentityModuleFunc('storeIdentity', { result: result, keyPair: keyPair }).then(function (value) {\n                resolve(value.userProfile.username);\n              }, function (err) {\n                reject(err);\n              });\n            } else {\n              reject('error on obtaining identity information');\n            }\n          });\n        }, function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_resetIdentities',\n    value: function _resetIdentities() {\n      console.log('_resetIdentities');\n    }\n  }]);\n\n  return IdentitiesGUI;\n}();\n\nexports.default = IdentitiesGUI;\n\n},{}]},{},[1])(1)\n});\n\n","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(guiURL, idmURL, messageBus) {\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    let _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    _this.callIdentityModuleFunc('deployGUI', {}).then(() => {\n      _this.resultURL  = undefined;\n\n      _this._messageBus.addListener(guiURL, msg => {\n        let identityInfo = msg.body.value;\n        let funcName = msg.body.method;\n        let value;\n\n        if (funcName === 'openPopup') {\n          let urlreceived = msg.body.params.urlreceived;\n          _this.openPopup(urlreceived).then((returnedValue) => {\n            let value = {type: 'execute', value: returnedValue, code: 200};\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n          });\n          return; // this avoids getting stuck in the identities page\n        }\n\n        // unhide the config page with the identity GUI\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n          let replyMsg;\n\n          //hide config page with the identity GUI\n          parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n          $('.admin-page').addClass('hide');\n          document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n          $('.identities-section').addClass('hide');\n          $('.policies-section').addClass('hide');\n\n          switch (identityInfo.type) {\n            case 'idp':\n              value = { type: 'idp', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            case 'identity':\n              value = { type: 'identity', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            default:\n              value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n          }\n        });\n      });\n\n      $('.identities-page-show').on('click', function () {\n        //TODO call a IdM method that requests the identities\n        _this.showIdentitiesGUI();\n      });\n    });\n  }\n\n  callIdentityModuleFunc(methodName, parameters) {\n    let _this = this;\n    let message;\n\n    return new Promise((resolve, reject) => {\n      message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n        body: { resource: 'identity', method: methodName, params: parameters }, };\n      _this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n    });\n  }\n\n  openPopup(urlreceived) {\n\n    return new Promise((resolve, reject) => {\n\n      let win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');\n      if (window.cordova) {\n        win.addEventListener('loadstart', function(e) {\n          let url = e.url;\n          let code = /\\&code=(.+)$/.exec(url);\n          let error = /\\&error=(.+)$/.exec(url);\n\n          if (code || error) {\n            win.close();\n            resolve(url);\n          }\n        });\n      } else {\n        let pollTimer = setInterval(function() {\n          try {\n            if (win.closed) {\n              reject('Some error occured when trying to get identity.');\n              clearInterval(pollTimer);\n            }\n\n            if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {\n              window.clearInterval(pollTimer);\n              let url =   win.document.URL;\n\n              win.close();\n              resolve(url);\n            }\n          } catch (e) {\n            //console.log(e);\n          }\n        }, 500);\n      }\n    });\n  }\n\n  showIdentitiesGUI(receivedInfo) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\n        identityInfo = resultObject.identityInfo;\n        toRemoveID = resultObject.toRemoveID;\n\n        $('.policies-section').addClass('hide');\n        $('.identities-section').removeClass('hide');\n\n        _this.showMyIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n          console.log('chosen identity: ', identity);\n          resolve({type: 'identity', value: identity});\n        });\n\n        let callback = (value) => {\n          console.log('chosen identity: ', value);\n          resolve({type: 'identity', value: value});\n        };\n\n        let idps = [];\n        let idpsObjects = identityInfo.idps;\n\n        idpsObjects.forEach(function(entry) {\n          if(entry.type && entry.type == 'idToken') {\n            idps.push(entry.domain);\n          }\n        });\n\n        $('#idproviders').html(_this._getList(idps));\n        $('#idproviders').off();\n        $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\n        //$('.back').on('click', (event) => _this.goHome());\n        $('.identities-reset').off();\n        $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n      });\n    });\n  }\n\n  _checkReceivedInfo(receivedInfo) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      let identityInfo, toRemoveID;\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n        resolve({identityInfo: identityInfo, toRemoveID:toRemoveID});\n      } else {\n        toRemoveID = true;\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\n        });\n      }\n    });\n  }\n\n  showMyIdentities(emails, toRemoveID) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      // let identities = _this.identityModule.getIdentities();\n      let identities = [];\n\n      for (let i in emails) {\n        let domain = emails[i].split('@');\n        identities.push({ email: emails[i], domain: domain[1] });\n      }\n\n      let myIdentities = document.getElementById('my-ids');\n      myIdentities.innerHTML = '';\n\n      let table = _this.createTable();\n\n      let tbody = document.createElement('tbody');\n      let numIdentities = identities.length;\n      for (let i = 0; i < numIdentities; i++) {\n        let tr = _this.createTableRow(identities[i], toRemoveID);\n        tbody.appendChild(tr);\n      }\n\n      table.appendChild(tbody);\n      myIdentities.appendChild(table);\n\n      let callback = (identity) => {\n        resolve(identity);\n      };\n\n      if (!toRemoveID) {\n        $('.clickable-cell').on('click', (event) => _this.changeID(callback));\n      }\n\n      $('.remove-id').on('click', (event) => _this.removeID(emails));\n\n    });\n  }\n\n  createTable() {\n    let table = document.createElement('table');\n    table.className = 'centered';\n    let thead = document.createElement('thead');\n    let tr = document.createElement('tr');\n    let thEmail = document.createElement('th');\n    thEmail.textContent = 'Email';\n    tr.appendChild(thEmail);\n    thead.appendChild(tr);\n    table.appendChild(thead);\n    return table;\n  }\n\n  createTableRow(identity, toRemoveID) {\n    let tr = document.createElement('tr');\n\n    let td = document.createElement('td');\n    td.textContent = identity.email;\n    td.className = 'clickable-cell';\n    td.style = 'cursor: pointer';\n    tr.appendChild(td);\n\n    td = document.createElement('td');\n\n    if (toRemoveID) {\n      let btn = document.createElement('button');\n      btn.textContent = 'Remove';\n      btn.className = 'remove-id waves-effect waves-light btn';\n      td.appendChild(btn);\n    }\n\n    tr.appendChild(td);\n\n    return tr;\n  }\n\n  changeID(callback) {\n    let _this = this;\n\n    let idToUse = event.target.innerText;\n\n    //TODO improve later.\n    //prevents when the users selects an hyperty, exit the identity page and\n    //goes again to the identity page, from selecting \"settings\" button as identity.\n    if (idToUse !== 'settings') {\n\n      callback(idToUse);\n      return idToUse;\n    }\n  }\n\n  removeID(emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\n      let numEmails = emails.length;\n      for (let i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n\n      // -------------------------------------------------------------------------//\n      _this.showMyIdentities(emails, true);\n    });\n\n    //_this.identityModule.unregisterIdentity(idToRemove);\n\n  }\n\n  obtainNewIdentity(event, callback, toRemoveID) {\n    let _this = this;\n    let idProvider = event.target.textContent;\n    let idProvider2 = event.target.text;\n\n    _this.callIdentityModuleFunc('generateRSAKeyPair', {}).then((keyPair) => {\n      let publicKey = btoa(keyPair.public);\n\n      _this.callIdentityModuleFunc('sendGenerateMessage',\n        { contents: publicKey, origin: 'origin', usernameHint: undefined,\n        idpDomain: idProvider, }).then((value) => {\n        console.log('receivedURL: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if (url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if (secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n\n        _this.resultURL = finalURL || url;\n\n        $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n        $('.login').removeClass('hide');\n        $('.login-btn').off();\n        $('.login-btn').on('click', (event) => {\n          $('.login').addClass('hide');\n          _this._authenticateUser(keyPair, publicKey, value, 'origin', idProvider).then((email) => {\n            callback(email);\n            _this.showIdentitiesGUI();\n          });\n        });\n      });\n    }).catch(err => console.log('obtanin new identity', err));\n\n  }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(keyPair, publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.openPopup(url).then((identity) => {\n\n        _this.callIdentityModuleFunc('sendGenerateMessage',\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\n\n          if (result) {\n\n           //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n           _this.callIdentityModuleFunc('storeIdentity', {result: result, keyPair: keyPair}).then((value) => {\n             resolve(value.userProfile.username);\n           }, (err) => {\n             reject(err);\n           });\n\n          } else {\n           reject('error on obtaining identity information');\n          }\n\n          });\n         }, (err) => {\n           reject(err);\n      });\n    });\n  }\n\n_resetIdentities() {\n  console.log('_resetIdentities');\n}\n\n\n}\n\nexport default IdentitiesGUI;\n"]}